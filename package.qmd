---
title: "dummypack"
author: "Katherine Lu"
format: revealjs
editor: visual
title-slide-attributes: 
  data-background-color: "#f0edf2"
---

## Imagine... {background-color="#f0edf2"}

\

#### SURVEY

::: {.callout-note title="What type of area do you live in?" icon="false" style="font-size: 24px"}
a)  Urban
b)  Suburban
c)  Rural
:::

::: notes
-   a survey asking about the community you live in
:::

## Q: What type of area do you live in? {background-color="#f0edf2"}

Survey results: dummy variables

-   AreaType1 = urban, AreaType2 = suburban, AreaType3 = rural

```{r, include=FALSE}
library(dplyr)
library(here)
surveydata <- read.csv(here("data/randomsurvey.csv"))
data1 <- surveydata %>%
    select(starts_with("AreaType"))
```

``` r
head(data1, n = 8)
```

```{r, message=FALSE, warning=FALSE}
head(data1, n = 8)
```

::: notes
-   this is how a survey question with multiple options gets coded
-   eg. in RedCap, dummy variables called AreaType1,2,3 auto generated
-   not very intuitive to look at
:::

## Objective {background-color="#f0edf2"}

\

#### Create a function to quickly combine dummy variables into one variable with appropriate category names

## dummyvar {background-color="#f0edf2"}

#### dummyvar(data, prefix, label_list, varname)

-   data: your data
-   prefix: prefix of group of dummy variables
-   label_list: list of labels to rename dummy variables (optional)
-   varname: label for your combined variable (optional)

Output: dataset with added combined variable

## Example {background-color="#f0edf2"}

``` r
area_labels <- c("Urban", "Suburban", "Rural")

data2 <- dummyvar(data=data1, prefix="AreaType", label_list=area_labels, varname="Area Types")
```

::: notes
- we will apply dummyvar to our example data (discuss arguments)
:::

## Example {background-color="#f0edf2"}

``` r
area_labels <- c("Urban", "Suburban", "Rural")

data2 <- dummyvar(data=data1, prefix="AreaType", label_list=area_labels, varname="Area Types")
```

\

``` r
head(data2, n=8)
```

```{r echo=FALSE}
dummyvar <- function(data, prefix, label_list, varname){

  #subset data based on dummy vars prefix
  subset <- data %>%
    dplyr::select(dplyr::starts_with(prefix))

  #rename variables based on labels list, if provided
  if (!missing(label_list)) {
    colnames(subset) <- label_list
  }

  #create combined variable in original dataframe, using subset
  data$combined <- colnames(subset)[max.col(subset)]

  #factor the combined variable
  data$combined <- factor(data$combined)

  #label the combined variable, if varname provided
  #if not provided, use prefix
  if (missing(varname)) {
    table1::label(data$combined) <- prefix
  } else {
    table1::label(data$combined) <- varname
  }

  #return dataframe, with new combined variable
  return(data)
}

area_labels <- c("Urban", "Suburban", "Rural")

data2 <- dummyvar(data=surveydata, prefix="AreaType", label_list=area_labels, varname="Area Types")

head(data2[, c('AreaType1', 'AreaType2', 'AreaType3', 'combined')], n=8)
```

::: notes
- the dataset now has the new column "combined"
:::

## Example {background-color="#f0edf2"}

Create a Table 1 using our new combined variable

``` r
table1(~combined, data=data2)
```

\

![](images/dummyvartable1.png){fig-align="center" width="auto"}

\

## Inside the function {background-color="#f0edf2"}

``` r
dummyvar <- function(data, prefix, label_list, varname){

  #subset data based on dummy vars prefix
  subset <- data %>%
    dplyr::select(dplyr::starts_with(prefix))

  #rename variables based on labels list, if provided
  if (!missing(label_list)) {
    colnames(subset) <- label_list
  }

  #create combined variable in original dataframe, using subset
  data$combined <- colnames(subset)[max.col(subset)]

  #factor the combined variable
  data$combined <- factor(data$combined)

  #label the combined variable, if varname provided
  #if not provided, use prefix
  if (missing(varname)) {
    table1::label(data$combined) <- prefix
  } else {
    table1::label(data$combined) <- varname
  }

  #return dataframe, with new combined variable
  return(data)
}
```

::: notes
-   create combined variable:
- max.col looks for the column with the highest value in each row (aka the 1)
- and it takes the name of the column with the 1, and that becomes the value in the new variable combined
:::

## What if... {.smaller background-color="#f0edf2"}

#### SURVEY

::: {.callout-note title="Select your top 3 most important community aspects:" icon="false" style="font-size: 24px"}
a)  Health
b)  Education
c)  Transportation
d)  Social services
e)  Safety
f)  Diversity and inclusion
g)  Housing
:::

::: notes
-   a survey question where you can select multiple options
:::

## Q: Select your top 3 most important community aspects {background-color="#f0edf2"}

Survey results:

-   dummy variables are NOT exclusive
-   cannot combine into one variable

```{r, include=FALSE}
data1 <- surveydata %>%
    select(starts_with("Aspect"))
```

``` r
head(data1, n = 5)
```

```{r, message=FALSE, warning=FALSE}
head(data1, n = 5)
```

## Objective 2 {background-color="#f0edf2"}

\

#### Create a function to explore multi-option dummy variables that cannot be combined into one variable

## dummyfreq {background-color="#f0edf2"}

#### dummyfreq(data, prefix, label_list, title)

-   data: your data
-   prefix: prefix of group of dummy variables
-   label_list: list of labels to rename dummy variables (optional)
-   title: title for table 1 (optional)

Output: table 1 for a set of dummy variables

## Example {background-color="#f0edf2"}

``` r
category_names <- c("Health", "Education", "Transportation", "Social services", "Safety", "Diversity & inclusion", "Housing")

dummyfreq(data=randomsurvey, prefix="Aspect", label_list=category_names, title="Community aspects")
```

## Example {background-color="#f0edf2"}

``` r
category_names <- c("Health", "Education", "Transportation", "Social services", "Safety", "Diversity & inclusion", "Housing")

dummyfreq(data=randomsurvey, prefix="Aspect", label_list=category_names, title="Community aspects")
```

![](images/dummyfreqtable1.png){fig-align="center" width="400"}

::: notes
-   limitation: doesn't show missing
:::

## Inside the function {background-color="#f0edf2"}

``` r
dummyfreq <- function(data, prefix, label_list, title){

  #subset data based on dummy prefix
  data <- data %>%
    dplyr::select(dplyr::starts_with(prefix))

  #rename variables based on labels list, if provided
  if (!missing(label_list)) {
    colnames(data) <- label_list
  }

  #add title if provided
  #if no title argument, use variable prefix
  if (missing(title)) {
    title1 <- paste(prefix, "n (%)")
  } else {
    title1 <- paste(title, "n (%)")
  }

  #turn dummy vars into logicals
  data[colnames(data)] <- lapply(data[colnames(data)], as.logical)

  #create render so that only TRUE is shown
  rndr <- function(x, ...) {
    y <- table1::render.default(x, ...)
    if (is.logical(x)) y[2] else y
  }

  #create table1
  return(table1::table1(~ ., data=data, caption=title1, render=rndr))
}
```

## Thank you {background-color="#f0edf2"}

![](images/dummies.jpg){fig-align="center" width="auto"}
